/**
 *
 */
package hume;

import java.util.Random;

/**
 * @author eckhart
 *
 */
public strictfp class Agent {

	/**
	 *
	 * @author eckhart
	 *
	 */
	protected class Property {
		double local, market;

		Property(double localProperty, double marketProperty) {
			assert localProperty >= 0.0 && localProperty <= 1.0 &&
			       marketProperty >= 0.0 && marketProperty <= 1.0;
			local = localProperty;
			market = marketProperty;
		}

		Property() { this(1.0, 1.0); } // default: always confiding trustworthy, honest, reliable

		double stepFunction(double distance, double radius) {
			assert distance >= 0.0 && distance <= 1.0;
			if (distance > radius) return market;
			else return local;
		}
	}


	/** Number of the agent. Agents are numbered starting from 0 onward. */
	int ordN;

	static int numCompetences;
	static Network network;
	static Random random;

	protected double competences[];

	protected Property trust = new Property();
	protected Property trustworthiness = new Property();
	protected Property honesty = new Property();
	protected Property reliability = new Property();

	protected double searchRadius = 0.5;
	protected double exploitRadius = 0.5;

	/**
	 *
	 */
	protected void normalizeCompetences() {
		double sum = 0.0;
		for (double f : competences) {
			sum += f;
		}
		for (int i = 0; i < numCompetences; i++) competences[i] /= sum;
	}

	/**
	 *
	 */
	public Agent() {
		// TODO Auto-generated constructor stub
	}

	/**
	 *
	 * @param radius
	 * @return
	 */
	public double exploitProbability(double distance) {
		return trustworthiness.stepFunction(distance, exploitRadius);
	}

//	public double tellCompetence(Agent other, int problem) {
//		assert problem < numCompetences;
//		return competences[problem];	// HUME 1.0: complete honesty
//	}
//
//	public double investCompetence(Agent other, int problem) {
//		assert problem < numCompetences;
//		return competences[problem];	// HUME 1.0: complete reliability
//	}

	/**
	 *
	 * @param other
	 * @param problem
	 * @return
	 */
	public boolean trust(Agent other, int problem) {
		assert problem < numCompetences;

	}

	public boolean reward(Agent other, int problem) {
		assert problem < numCompetences;
		double p = exploitProbability(network.distance(this, other));
		if (random.nextDouble() < p)
			return false;
		else
			return true;
	}
}
